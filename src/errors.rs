/// Possible error types when classifying with a [SVM].
#[derive(Debug)]
pub enum SVMError {
    /// This can be emitted when creating a [SVM] from a [ModelFile]. For models generated by
    /// libSVM's `svm-train`, the most common reason this occurs is skipping attributes.
    /// All attributes must be in sequential order 0, 1, 2, ..., n. If they are not, this
    /// error will be emitted. For more details see the documentation provided in [ModelFile].
    AttributesUnordered {
        /// The index process that was not a direct successor of the previous index. Can be used for
        /// easier debugging the model file.
        index: u32,

        /// The value of the given index. Can be used for debugging in conjunction with `index`.
        value: f32,

        /// The last index processed. If everything were alright, then `index` should equal
        /// `last_index + 1`.
        last_index: u32,
    },

    /// This error can be emitted by [Predict::predict_probability()] in case the model loaded by
    /// [ModelFile] was not trained with probability estimates (`svm-train -b 1`).
    NoProbabilities,

    /// Can be emitted by [Predict::predict_probability()] when predicting probabilities
    /// and the internal iteration limit was exceeded.
    IterationsExceeded,

    /// If an `rbf` kernel is loaded but the model does not have a `gamma` set this error will be raised.
    NoGamma,
}

/// Possible error types when loading a [ModelFile].
#[derive(Debug)]
pub enum ModelError {
    /// This signals there was a general parsing error. For models generated with `svm-train`
    /// this should not happen.
    ParsingError,
}
